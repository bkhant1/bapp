name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  BACKEND_IMAGE: bookexchange-backend
  FRONTEND_IMAGE: bookexchange-frontend
  REGION: europe-west2

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_bookexchange
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run linting
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=venv
        black --check .
        isort --check-only .
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_bookexchange
        SECRET_KEY: test-secret-key
        DEBUG: True
      run: |
        cd backend
        python manage.py test
        
    - name: Generate coverage report
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_bookexchange
        SECRET_KEY: test-secret-key
        DEBUG: True
      run: |
        cd backend
        coverage run --source='.' manage.py test
        coverage xml

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run linting
      run: |
        cd frontend
        npm run lint
    
    - name: Run tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build

  build-and-deploy:
    needs: [test-backend, test-frontend, terraform-apply]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Configure Docker to use gcloud as a credential helper
      run: gcloud auth configure-docker
    
    - name: Build and push backend image
      run: |
        cd backend
        docker build -t gcr.io/$PROJECT_ID/$BACKEND_IMAGE:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/$BACKEND_IMAGE:$GITHUB_SHA
        docker tag gcr.io/$PROJECT_ID/$BACKEND_IMAGE:$GITHUB_SHA gcr.io/$PROJECT_ID/$BACKEND_IMAGE:latest
        docker push gcr.io/$PROJECT_ID/$BACKEND_IMAGE:latest
    
    - name: Build and push frontend image
      run: |
        cd frontend
        docker build -t gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$GITHUB_SHA .
        docker push gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$GITHUB_SHA
        docker tag gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$GITHUB_SHA gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:latest
        docker push gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:latest
    
    - name: Deploy to Cloud Run
      run: |
        # Deploy backend
        gcloud run deploy bookexchange-backend \
          --image gcr.io/$PROJECT_ID/$BACKEND_IMAGE:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }},DEBUG=False,GCS_BUCKET_NAME=${{ secrets.GCS_BUCKET_NAME }}"
        
        # Deploy frontend
        BACKEND_URL=$(gcloud run services describe bookexchange-backend --region=$REGION --format="value(status.url)")
        gcloud run deploy bookexchange-frontend \
          --image gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:$GITHUB_SHA \
          --region $REGION \
          --platform managed \
          --allow-unauthenticated \
          --set-env-vars="REACT_APP_API_URL=$BACKEND_URL"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  terraform-plan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Terraform Init
      run: |
        cd infra
        terraform init
    
    - name: Terraform Plan
      run: |
        cd infra
        terraform plan \
          -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
          -var="database_password=${{ secrets.DATABASE_PASSWORD }}" \
          -var="project_name=bookexchange" \
          -var="region=europe-west2" \
          -var="zone=europe-west2-a"

  terraform-apply:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Terraform Init
      run: |
        cd infra
        terraform init
    
    - name: Terraform Apply
      run: |
        cd infra
        terraform apply -auto-approve \
          -var="project_id=${{ secrets.GCP_PROJECT_ID }}" \
          -var="database_password=${{ secrets.DATABASE_PASSWORD }}" \
          -var="project_name=bookexchange" \
          -var="region=europe-west2" \
          -var="zone=europe-west2-a" 