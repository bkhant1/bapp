# Generated by Django 5.0.1 on 2025-08-14 09:25

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Author",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_name", models.CharField(max_length=100)),
                ("last_name", models.CharField(max_length=100)),
                ("bio", models.TextField(blank=True)),
                ("birth_date", models.DateField(blank=True, null=True)),
                ("death_date", models.DateField(blank=True, null=True)),
                ("nationality", models.CharField(blank=True, max_length=100)),
                ("website", models.URLField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "books_author",
                "ordering": ["last_name", "first_name"],
            },
        ),
        migrations.CreateModel(
            name="Genre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50, unique=True)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "books_genre",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Publisher",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, unique=True)),
                ("description", models.TextField(blank=True)),
                ("website", models.URLField(blank=True)),
                ("country", models.CharField(blank=True, max_length=100)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "books_publisher",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Book",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=300)),
                ("subtitle", models.CharField(blank=True, max_length=300)),
                (
                    "isbn_10",
                    models.CharField(blank=True, max_length=10, null=True, unique=True),
                ),
                (
                    "isbn_13",
                    models.CharField(blank=True, max_length=13, null=True, unique=True),
                ),
                ("publication_date", models.DateField(blank=True, null=True)),
                ("edition", models.CharField(blank=True, max_length=50)),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("en", "English"),
                            ("es", "Spanish"),
                            ("fr", "French"),
                            ("de", "German"),
                            ("it", "Italian"),
                            ("pt", "Portuguese"),
                            ("ru", "Russian"),
                            ("zh", "Chinese"),
                            ("ja", "Japanese"),
                            ("ar", "Arabic"),
                            ("other", "Other"),
                        ],
                        default="en",
                        max_length=10,
                    ),
                ),
                ("pages", models.PositiveIntegerField(blank=True, null=True)),
                ("format", models.CharField(blank=True, max_length=50)),
                ("description", models.TextField(blank=True)),
                (
                    "cover_image",
                    models.ImageField(blank=True, null=True, upload_to="book_covers/"),
                ),
                ("goodreads_id", models.CharField(blank=True, max_length=50)),
                ("google_books_id", models.CharField(blank=True, max_length=50)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "authors",
                    models.ManyToManyField(related_name="books", to="books.author"),
                ),
                (
                    "genres",
                    models.ManyToManyField(
                        blank=True, related_name="books", to="books.genre"
                    ),
                ),
                (
                    "publisher",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="books.publisher",
                    ),
                ),
            ],
            options={
                "db_table": "books_book",
                "ordering": ["title"],
                "unique_together": {("title", "publication_date", "publisher")},
            },
        ),
        migrations.CreateModel(
            name="UserBook",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("owned", "Owned"),
                            ("reading", "Currently Reading"),
                            ("read", "Read"),
                            ("want_to_read", "Want to Read"),
                            ("available", "Available for Exchange"),
                            ("lent_out", "Lent Out"),
                            ("exchanged", "Exchanged"),
                        ],
                        default="owned",
                        max_length=20,
                    ),
                ),
                (
                    "condition",
                    models.CharField(
                        choices=[
                            ("new", "New"),
                            ("like_new", "Like New"),
                            ("very_good", "Very Good"),
                            ("good", "Good"),
                            ("acceptable", "Acceptable"),
                            ("poor", "Poor"),
                        ],
                        default="good",
                        max_length=20,
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                (
                    "rating",
                    models.PositiveIntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("review", models.TextField(blank=True)),
                ("purchase_date", models.DateField(blank=True, null=True)),
                (
                    "purchase_price",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("location", models.CharField(blank=True, max_length=100)),
                ("available_for_exchange", models.BooleanField(default=False)),
                (
                    "exchange_type",
                    models.CharField(
                        choices=[
                            ("permanent", "Permanent Exchange"),
                            ("temporary", "Temporary Loan"),
                            ("both", "Both"),
                        ],
                        default="both",
                        max_length=20,
                    ),
                ),
                ("current_page", models.PositiveIntegerField(default=0)),
                ("date_started", models.DateField(blank=True, null=True)),
                ("date_finished", models.DateField(blank=True, null=True)),
                ("added_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_books",
                        to="books.book",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="books",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "books_user_book",
                "ordering": ["-added_at"],
                "unique_together": {("user", "book")},
            },
        ),
        migrations.CreateModel(
            name="BookReview",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.PositiveIntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=200)),
                ("content", models.TextField()),
                ("is_spoiler", models.BooleanField(default=False)),
                ("is_public", models.BooleanField(default=True)),
                ("likes_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "book",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to="books.book",
                    ),
                ),
                (
                    "liked_by",
                    models.ManyToManyField(
                        blank=True,
                        related_name="liked_reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "books_review",
                "ordering": ["-created_at"],
                "unique_together": {("user", "book")},
            },
        ),
        migrations.CreateModel(
            name="BookCollection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True)),
                ("is_public", models.BooleanField(default=False)),
                ("is_collaborative", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "collaborators",
                    models.ManyToManyField(
                        blank=True,
                        related_name="collaborative_collections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="collections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "books",
                    models.ManyToManyField(
                        blank=True, related_name="collections", to="books.userbook"
                    ),
                ),
            ],
            options={
                "db_table": "books_collection",
                "ordering": ["name"],
                "unique_together": {("user", "name")},
            },
        ),
    ]
